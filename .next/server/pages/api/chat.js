"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat";
exports.ids = ["pages/api/chat"];
exports.modules = {

/***/ "@ai-sdk/openai":
/*!*********************************!*\
  !*** external "@ai-sdk/openai" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@ai-sdk/openai");

/***/ }),

/***/ "ai":
/*!*********************!*\
  !*** external "ai" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("ai");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("zod");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat%2Findex.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat%2Findex.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_index_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/chat/index.ts */ \"(api)/./pages/api/chat/index.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat\",\n        pathname: \"/api/chat\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_chat_index_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoYXQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmNoYXQlMkZpbmRleC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNzRDtBQUN0RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMscURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHFEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYXZlbC1yaXp6Lz80ODY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvY2hhdC9pbmRleC50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat%2Findex.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./ai/tools.ts":
/*!*********************!*\
  !*** ./ai/tools.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   budgetSelectorTool: () => (/* binding */ budgetSelectorTool),\n/* harmony export */   carouselTool: () => (/* binding */ carouselTool),\n/* harmony export */   currencyConverterTool: () => (/* binding */ currencyConverterTool),\n/* harmony export */   datePickerTool: () => (/* binding */ datePickerTool),\n/* harmony export */   detailsCardTool: () => (/* binding */ detailsCardTool),\n/* harmony export */   languageSelectorTool: () => (/* binding */ languageSelectorTool),\n/* harmony export */   placeCardTool: () => (/* binding */ placeCardTool),\n/* harmony export */   preferenceSelectorTool: () => (/* binding */ preferenceSelectorTool),\n/* harmony export */   quickResponseTool: () => (/* binding */ quickResponseTool),\n/* harmony export */   savedPlacesListTool: () => (/* binding */ savedPlacesListTool),\n/* harmony export */   stageProgressTool: () => (/* binding */ stageProgressTool),\n/* harmony export */   tools: () => (/* binding */ tools),\n/* harmony export */   transportSelectorTool: () => (/* binding */ transportSelectorTool),\n/* harmony export */   weatherChartTool: () => (/* binding */ weatherChartTool)\n/* harmony export */ });\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ai */ \"ai\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ai__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zod__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/types */ \"(api)/./managers/types.ts\");\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/places-utils */ \"(api)/./utils/places-utils.ts\");\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/stage-manager */ \"(api)/./managers/stage-manager.ts\");\n/* harmony import */ var _utils_currency_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/currency-utils */ \"(api)/./utils/currency-utils.ts\");\n\n\n\n\n\n\n// Tool for Budget Selection\nconst budgetSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display budget level options for the trip. Use this when discussing trip costs or when the user wants to set their budget preference.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        currentBudget: zod__WEBPACK_IMPORTED_MODULE_1__.z.enum([\n            \"$\",\n            \"$$\",\n            \"$$$\",\n            \"$$$$\"\n        ]).optional()\n    }),\n    execute: async function({ currentBudget }) {\n        return {\n            type: \"budgetSelector\",\n            props: {\n                currentBudget: currentBudget\n            }\n        };\n    }\n});\n// Tool for Travel Preferences\nconst preferenceSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display options for selecting travel preferences and interests.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        currentPreferences: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.nativeEnum(_managers_types__WEBPACK_IMPORTED_MODULE_2__.TravelPreference)).optional()\n    }),\n    execute: async function({ currentPreferences }) {\n        return {\n            type: \"preferenceSelector\",\n            props: {\n                currentPreferences: currentPreferences\n            }\n        };\n    }\n});\n// Tool for Date Selection\nconst datePickerTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display a date picker for selecting travel dates.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        startDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n    }),\n    execute: async function({ startDate, endDate }) {\n        return {\n            type: \"datePicker\",\n            props: {\n                startDate,\n                endDate\n            }\n        };\n    }\n});\n// Tool for Language Selection\nconst languageSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display language selection options.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        currentLanguage: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n    }),\n    execute: async function({ currentLanguage }) {\n        return {\n            type: \"languageSelector\",\n            props: {\n                currentLanguage: currentLanguage\n            }\n        };\n    }\n});\n// Tool for Transport Selection\nconst transportSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display transport method selection options. Use this when discussing transportation options for the trip, such as flights, trains, or car rentals.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        selectedMethod: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n    }),\n    execute: async function({ selectedMethod }) {\n        return {\n            type: \"transportSelector\",\n            props: {\n                selectedMethod\n            }\n        };\n    }\n});\n// Tool for Place Display\nconst placeCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: 'Display information about one specific place. Use this whenever the user explicitly asks for ONE place, whether by name or type (e.g., \"show me one theatre\", \"show me one restaurant\", \"show me The Little Mermaid statue\").',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        searchText: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"The name or description of the place to search for\"),\n        location: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number()\n        }),\n        destination: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"Name of the destination city\")\n    }),\n    execute: async function({ searchText, location, destination }) {\n        try {\n            const place = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(searchText, location, destination);\n            if (!place) {\n                console.error(\"No place found for search text:\", searchText);\n                return {\n                    type: \"placeCard\",\n                    props: {\n                        place: null\n                    },\n                    error: \"Could not find a unique place. Try searching for something else.\"\n                };\n            }\n            return {\n                type: \"placeCard\",\n                props: {\n                    place\n                }\n            };\n        } catch (error) {\n            console.error(\"Error searching for place:\", error);\n            return {\n                type: \"placeCard\",\n                props: {\n                    place: null\n                }\n            };\n        }\n    }\n});\n// Tool for Place Carousel\nconst carouselTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display multiple places in a carousel based on preferences or specific place types and automatically save them into savedPlaces.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        preferences: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.nativeEnum(_managers_types__WEBPACK_IMPORTED_MODULE_2__.TravelPreference)).optional(),\n        placeType: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional().describe(\"Specific place type to search for\"),\n        location: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number()\n        }),\n        maxResults: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional().default(5)\n    }),\n    execute: async function({ preferences, placeType, location, maxResults }) {\n        try {\n            let places = [];\n            if (preferences && preferences.length > 0) {\n                // Use our existing function to get places by preference\n                places = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.fetchPlaces)(location.latitude, location.longitude, preferences, maxResults);\n            } else if (placeType) {\n                // Search by specific place type\n                places = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.fetchPlaces)(location.latitude, location.longitude, undefined, maxResults, [\n                    placeType\n                ]);\n            }\n            return {\n                type: \"carousel\",\n                props: {\n                    places\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in carousel tool:\", error);\n            return {\n                type: \"carousel\",\n                props: {\n                    places: []\n                }\n            };\n        }\n    }\n});\n// Tool for Details Card\nconst detailsCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display travel details summary. Use this when the user wants to view a summary of their trip details, including destination, dates, preferences, budget, and more.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        content: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            dates: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                startDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n                endDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n            }).optional(),\n            preferences: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional(),\n            budget: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n            language: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n            transport: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional(),\n            dining: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional()\n        })\n    }),\n    execute: async function({ content }) {\n        return {\n            type: \"detailsCard\",\n            props: {\n                content\n            }\n        };\n    }\n});\nconst weatherChartTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display historical weather data including temperature and precipitation for a location.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        lat: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().min(-90).max(90).describe(\"Latitude of the location\"),\n        lon: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().min(-180).max(180).describe(\"Longitude of the location\"),\n        city: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"City name for display\"),\n        startDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"Trip start date in DD/MM/YYYY format\"),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"Trip end date in DD/MM/YYYY format\"),\n        units: zod__WEBPACK_IMPORTED_MODULE_1__.z.enum([\n            \"us\",\n            \"uk\",\n            \"metric\"\n        ]).optional().default(\"metric\")\n    }),\n    execute: async function({ lat, lon, city, startDate, endDate, units = \"metric\" }) {\n        // Parse DD/MM/YYYY dates\n        const [startDay, startMonth, startYear] = startDate.split(\"/\").map(Number);\n        const [endDay, endMonth, endYear] = endDate.split(\"/\").map(Number);\n        // Format dates for API (YYYY-MM-DD)\n        const formattedStartDate = `${startYear}-${String(startMonth).padStart(2, \"0\")}-${String(startDay).padStart(2, \"0\")}`;\n        const formattedEndDate = `${endYear}-${String(endMonth).padStart(2, \"0\")}-${String(endDay).padStart(2, \"0\")}`;\n        // Calculate number of days in the range\n        const start = new Date(formattedStartDate);\n        const end = new Date(formattedEndDate);\n        const daysDiff = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n        // Calculate how many extra days we need for 30 days total\n        const extraDays = Math.max(0, 30 - daysDiff);\n        const daysToAddBefore = Math.floor(extraDays / 2);\n        const daysToAddAfter = extraDays - daysToAddBefore;\n        // Extend dates to get 30 days\n        start.setDate(start.getDate() - daysToAddBefore);\n        end.setDate(end.getDate() + daysToAddAfter);\n        // Format extended dates for API\n        const extendedStartDate = start.toISOString().split(\"T\")[0];\n        const extendedEndDate = end.toISOString().split(\"T\")[0];\n        console.log(\"[weatherChartTool] Date conversion:\", {\n            originalDate: startDate,\n            originalEndDate: endDate,\n            formattedStartDate: extendedStartDate,\n            formattedEndDate: extendedEndDate,\n            totalDays: 30,\n            originalRange: daysDiff,\n            addedBefore: daysToAddBefore,\n            addedAfter: daysToAddAfter\n        });\n        return {\n            type: \"weatherChart\",\n            props: {\n                lat,\n                lon,\n                city,\n                startDate: extendedStartDate,\n                endDate: extendedEndDate,\n                units\n            }\n        };\n    }\n});\nconst savedPlacesListTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: 'Display all currently saved places in a list view. When user asks to see saved places (e.g. \"show me my saved places\", \"what places have I saved\", etc), pass ALL places from the savedPlaces parameter to this tool.',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        savedPlaces: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            id: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            displayName: zod__WEBPACK_IMPORTED_MODULE_1__.z.union([\n                zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                    text: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n                    languageCode: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n                }),\n                zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n            ]).optional(),\n            primaryType: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n            location: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                latitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n                longitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number()\n            }).optional(),\n            formattedAddress: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n            photos: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                name: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n                widthPx: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n                heightPx: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n                authorAttributions: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                    displayName: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n                    uri: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n                    photoUri: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n                })).optional() // Make optional\n            })).optional().default([]),\n            primaryTypeDisplayName: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                text: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n                languageCode: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n            }).optional() // Already optional\n        }))\n    }),\n    execute: async function({ savedPlaces }) {\n        console.log(\"[savedPlacesListTool] Executing with places:\", savedPlaces?.map((p)=>({\n                id: p.id,\n                hasPhotos: Boolean(p.photos?.length),\n                photoCount: p.photos?.length,\n                firstPhoto: p.photos?.[0],\n                primaryTypeDisplayName: p.primaryTypeDisplayName\n            })));\n        // Ensure we're passing the full array of places\n        if (!Array.isArray(savedPlaces)) {\n            console.error(\"[savedPlacesListTool] savedPlaces is not an array:\", savedPlaces);\n            return {\n                type: \"savedPlacesList\",\n                props: {\n                    places: []\n                }\n            };\n        }\n        // Make sure we pass the complete place objects\n        return {\n            type: \"savedPlacesList\",\n            props: {\n                places: savedPlaces.map((place)=>({\n                        ...place,\n                        photos: place.photos || [],\n                        primaryTypeDisplayName: place.primaryTypeDisplayName || {\n                            text: \"\",\n                            languageCode: \"en\"\n                        }\n                    })),\n                onRemove: undefined // Make it explicit that we're not handling removal here\n            }\n        };\n    }\n});\n// Simplify the stage progress tool to only include nextStage\nconst stageProgressTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Update the current planning stage only when certain criteria are met.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        nextStage: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().min(1).max(5),\n        currentStage: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().min(1).max(5),\n        travelDetails: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            location: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n                latitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n                longitude: zod__WEBPACK_IMPORTED_MODULE_1__.z.number()\n            }),\n            startDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            endDate: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            preferences: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()),\n            budget: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            language: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n            transport: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string())\n        }),\n        metrics: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n            totalPrompts: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n            savedPlacesCount: zod__WEBPACK_IMPORTED_MODULE_1__.z.number(),\n            isPaid: zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean(),\n            paymentReference: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n        })\n    }),\n    execute: async function({ nextStage, currentStage, travelDetails, metrics }) {\n        // console.log('[StageProgressTool] Executing:', { nextStage, currentStage, metrics });\n        const validationResult = (0,_managers_stage_manager__WEBPACK_IMPORTED_MODULE_4__.validateStageProgression)(currentStage, nextStage, travelDetails);\n        if (!validationResult.canProgress) {\n            console.log(\"[StageProgressTool] Validation failed:\", validationResult.missingRequirements);\n            return {\n                type: \"stageProgress\",\n                status: \"error\",\n                props: {\n                    nextStage: currentStage,\n                    error: `Cannot progress to stage ${nextStage}. Missing requirements: ${validationResult.missingRequirements.join(\", \")}`\n                }\n            };\n        }\n        return {\n            type: \"stageProgress\",\n            status: \"success\",\n            props: {\n                nextStage\n            }\n        };\n    }\n});\n// Tool for Quick Response\nconst quickResponseTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: `Present users with exactly 3 contextually relevant quick response options.\n    \n    CRITICAL RULES:\n    1. YOU MUST ALWAYS RETURN EXACTLY 3 OPTIONS - NO EXCEPTIONS\n    2. Keep options concise and action-oriented\n    3. Options must make sense as natural chat responses\n    4. Each option should be 2-6 words\n    \n    Stage-specific guidelines:\n    Stage 1: Focus on parameter updates (e.g., \\\"Update my travel dates\\\", \\\"Change my budget\\\")\n    Stage 2: Focus on city info (e.g., \\\"Check the weather\\\", \\\"See currency rates\\\")\n    Stage 3: Focus on places (e.g., \\\"Show me museums\\\", \\\"Find restaurants\\\")\n    Stage 4: Focus on itinerary (e.g., \\\"Add more activities\\\", \\\"Review the plan\\\")\n    Stage 5: Focus on completion (e.g., \\\"Download itinerary\\\", \\\"Share with friends\\\")`,\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        responses: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).length(3).describe(\"Exactly 3 quick response options\")\n    }),\n    execute: async function({ responses }) {\n        // console.log('[QuickResponse Tool] Executing with responses:', responses);\n        if (!Array.isArray(responses) || responses.length !== 3) {\n            console.error(\"[QuickResponse Tool] Invalid responses:\", responses);\n            throw new Error(\"Must provide exactly 3 responses\");\n        }\n        // Validate each response\n        responses.forEach((response, index)=>{\n            if (!response || typeof response !== \"string\" || response.trim().length === 0) {\n                throw new Error(`Invalid response at index ${index}`);\n            }\n        });\n        console.log(\"[QuickResponse Tool] Returning valid responses\");\n        return {\n            type: \"quickResponse\",\n            props: {\n                responses\n            }\n        };\n    }\n});\n// Tool for Currency Conversion\nconst currencyConverterTool = (0,ai__WEBPACK_IMPORTED_MODULE_0__.tool)({\n    description: \"Display currency conversion rates for the destination country. Use this when discussing costs, budgets, or when the user wants to understand currency exchange rates.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n        amount: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional().describe(\"Amount to convert in the destination currency\"),\n        destination: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().describe(\"Destination country or city\")\n    }),\n    execute: async function({ amount = 100, destination }) {\n        if (!destination) {\n            throw new Error(\"Destination is required for currency conversion\");\n        }\n        const baseCurrency = (0,_utils_currency_utils__WEBPACK_IMPORTED_MODULE_5__.getCurrencyFromCountry)(destination);\n        return {\n            type: \"currencyConverter\",\n            props: {\n                baseCurrency,\n                baseAmount: amount,\n                defaultCurrencies: [\n                    \"USD\",\n                    \"EUR\",\n                    \"GBP\",\n                    \"CNY\",\n                    \"JPY\"\n                ]\n            }\n        };\n    }\n});\n// Export all tools with their names\nconst tools = {\n    budgetSelector: budgetSelectorTool,\n    preferenceSelector: preferenceSelectorTool,\n    datePicker: datePickerTool,\n    languageSelector: languageSelectorTool,\n    transportSelector: transportSelectorTool,\n    placeCard: placeCardTool,\n    carousel: carouselTool,\n    detailsCard: detailsCardTool,\n    weatherChart: weatherChartTool,\n    savedPlacesList: savedPlacesListTool,\n    stageProgress: stageProgressTool,\n    quickResponse: quickResponseTool,\n    currencyConverter: currencyConverterTool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./ai/tools.ts\n");

/***/ }),

/***/ "(api)/./managers/stage-manager.ts":
/*!***********************************!*\
  !*** ./managers/stage-manager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STAGE_LIMITS: () => (/* binding */ STAGE_LIMITS),\n/* harmony export */   validateStageProgression: () => (/* binding */ validateStageProgression)\n/* harmony export */ });\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/session-manager */ \"(api)/./utils/session-manager.ts\");\n\n// Validation functions for each stage\nconst STAGE_LIMITS = {\n    3: {\n        maxPrompts: 1,\n        upgradeMessage: `I'm sorry to tell you that you have reached the prompts limit in the free version. \n    Would you like to upgrade to unlock unlimited places browsing and premium features? \n    This will give you access to personalized recommendations, detailed scheduling, and local insights.`\n    }\n};\nconst STAGE_VALIDATORS = {\n    // Stage 1: Initial Parameter Check\n    1: {\n        validate: (details)=>{\n            const missingRequirements = [];\n            if (!details.destination) missingRequirements.push(\"destination\");\n            if (!details.startDate) missingRequirements.push(\"start date\");\n            if (!details.endDate) missingRequirements.push(\"end date\");\n            if (!details.preferences?.length) missingRequirements.push(\"preferences\");\n            if (!details.language) missingRequirements.push(\"language\");\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 2: City Introduction\n    2: {\n        validate: (details, session)=>{\n            return {\n                isValid: true,\n                missingRequirements: []\n            };\n        }\n    },\n    // Stage 3: Places Introduction\n    3: {\n        validate: (details, session)=>{\n            const { totalPrompts, stagePrompts, savedPlaces } = session;\n            const stagePromptCount = stagePrompts?.[3] || 0;\n            const upgradeRequired = !session.isPaid && stagePromptCount >= STAGE_LIMITS[3].maxPrompts;\n            // Check if we have enough places saved\n            const minPlacesRequired = 3;\n            const hasEnoughPlaces = savedPlaces.length >= minPlacesRequired;\n            // Check if we have diverse place types based on preferences\n            const placeTypes = new Set(savedPlaces.map((p)=>p.primaryType));\n            const hasGoodCoverage = placeTypes.size >= Math.min(2, details.preferences.length);\n            const missingRequirements = [];\n            if (!hasEnoughPlaces) {\n                missingRequirements.push(`at least ${minPlacesRequired} places`);\n            }\n            if (!hasGoodCoverage) {\n                missingRequirements.push(\"more diverse place types\");\n            }\n            return {\n                isValid: !upgradeRequired && hasEnoughPlaces && hasGoodCoverage,\n                missingRequirements,\n                upgradeRequired\n            };\n        }\n    },\n    // Stage 4: Itinerary Review (with payment check)\n    4: {\n        validate: (details, session)=>{\n            const { isPaid, savedPlaces } = session;\n            const missingRequirements = [];\n            // Check payment status\n            if (!isPaid) {\n                missingRequirements.push(\"premium subscription\");\n            }\n            // Check minimum places for a good itinerary\n            const minPlacesForItinerary = 5;\n            if (savedPlaces.length < minPlacesForItinerary) {\n                missingRequirements.push(`at least ${minPlacesForItinerary} places`);\n            }\n            // Check place type distribution\n            const placeTypes = new Set(savedPlaces.map((p)=>p.primaryType));\n            const minPlaceTypes = Math.min(3, details.preferences.length);\n            if (placeTypes.size < minPlaceTypes) {\n                missingRequirements.push(\"more diverse place types\");\n            }\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements,\n                upgradeRequired: !isPaid\n            };\n        }\n    },\n    // Stage 5: Final Confirmation (keeping it open as requested)\n    5: {\n        validate: (_, session)=>{\n            const isPaid = session.isPaid;\n            return {\n                isValid: isPaid,\n                missingRequirements: isPaid ? [] : [\n                    \"premium subscription\"\n                ],\n                upgradeRequired: !isPaid\n            };\n        }\n    }\n};\n// Main validation function to be used in the chat component\nfunction validateStageProgression(currentStage, nextStage, travelDetails) {\n    let session = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_0__.getStoredSession)();\n    // If no session exists but we have travel details, initialize one\n    if (!session && travelDetails.destination) {\n        session = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_0__.initializeSession)();\n        session.destination = travelDetails.destination;\n        session.startDate = travelDetails.startDate || \"\";\n        session.endDate = travelDetails.endDate || \"\";\n        session.preferences = travelDetails.preferences || [];\n        session.budget = travelDetails.budget || \"\";\n        session.language = travelDetails.language || \"\";\n        session.transport = travelDetails.transport || [];\n        session.currentStage = currentStage;\n    }\n    if (!session) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"valid session\"\n            ]\n        };\n    }\n    // Ensure stage progression is sequential\n    if (nextStage !== currentStage + 1) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage progression\"\n            ]\n        };\n    }\n    // Get validator for current stage\n    const validator = STAGE_VALIDATORS[currentStage];\n    if (!validator) {\n        return {\n            canProgress: true,\n            missingRequirements: []\n        };\n    }\n    // Check if current stage requirements are met before progressing\n    const { isValid, missingRequirements, upgradeRequired } = validator.validate(travelDetails, session);\n    // If current stage requirements are met, allow progression\n    if (isValid) {\n        return {\n            canProgress: true,\n            missingRequirements: [],\n            upgradeRequired\n        };\n    }\n    return {\n        canProgress: isValid,\n        missingRequirements,\n        upgradeRequired\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./managers/stage-manager.ts\n");

/***/ }),

/***/ "(api)/./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: () => (/* binding */ BUDGET_DESCRIPTIONS),\n/* harmony export */   BUDGET_OPTIONS: () => (/* binding */ BUDGET_OPTIONS),\n/* harmony export */   BudgetLevel: () => (/* binding */ BudgetLevel),\n/* harmony export */   CURRENCY_INFO: () => (/* binding */ CURRENCY_INFO),\n/* harmony export */   ComponentType: () => (/* binding */ ComponentType),\n/* harmony export */   DEFAULT_CURRENCIES: () => (/* binding */ DEFAULT_CURRENCIES),\n/* harmony export */   LANGUAGE_LABELS: () => (/* binding */ LANGUAGE_LABELS),\n/* harmony export */   LANGUAGE_OPTIONS: () => (/* binding */ LANGUAGE_OPTIONS),\n/* harmony export */   PREFERENCE_ICONS: () => (/* binding */ PREFERENCE_ICONS),\n/* harmony export */   PREFERENCE_OPTIONS: () => (/* binding */ PREFERENCE_OPTIONS),\n/* harmony export */   SupportedLanguage: () => (/* binding */ SupportedLanguage),\n/* harmony export */   TravelPreference: () => (/* binding */ TravelPreference)\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map(([key, value])=>({\n        value,\n        label: LANGUAGE_LABELS[value]\n    }));\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./managers/types.ts\n");

/***/ }),

/***/ "(api)/./pages/api/chat/index.ts":
/*!*********************************!*\
  !*** ./pages/api/chat/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/openai */ \"@ai-sdk/openai\");\n/* harmony import */ var _ai_sdk_openai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ai_sdk_openai__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ai */ \"ai\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ai__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ai_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../ai/tools */ \"(api)/./ai/tools.ts\");\n\n\n\n// Configure response timeout\nconst config = {\n    api: {\n        responseLimit: false,\n        bodyParser: {\n            sizeLimit: \"1mb\"\n        }\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const body = req.body;\n        // Ensure savedPlaces is properly typed and has all required fields\n        const typedSavedPlaces = (body.savedPlaces || []).map((p)=>({\n                ...p,\n                photos: p.photos || [],\n                // Only set primaryTypeDisplayName if it doesn't exist AND we have a primaryType\n                primaryTypeDisplayName: p.primaryTypeDisplayName || (p.primaryType ? {\n                    text: p.primaryType,\n                    languageCode: \"en\"\n                } : undefined)\n            }));\n        console.log(\"Debug - API received:\", {\n            currentDetails: body.currentDetails,\n            savedPlaces: typedSavedPlaces.map((p)=>({\n                    id: p.id,\n                    photos: p.photos,\n                    primaryTypeDisplayName: p.primaryTypeDisplayName\n                })),\n            currentStage: body.currentStage,\n            metrics: body.metrics,\n            message: body.messages[body.messages.length - 1]\n        });\n        console.log(\"[chat] Processing request:\", {\n            messageCount: body.messages.length,\n            destination: body.currentDetails.destination\n        });\n        // Validate request and required fields\n        if (!body.messages?.length || !body.currentDetails || !body.metrics) {\n            console.error(\"Missing required fields:\", {\n                hasMessages: !!body.messages?.length,\n                hasCurrentDetails: !!body.currentDetails,\n                hasMetrics: !!body.metrics\n            });\n            return res.status(400).json({\n                error: \"Invalid request: messages, currentDetails, and metrics are required\"\n            });\n        }\n        // Validate currentDetails fields\n        if (!body.currentDetails.destination) {\n            console.error(\"Missing destination in currentDetails:\", body.currentDetails);\n            return res.status(400).json({\n                error: \"Invalid request: destination is required\"\n            });\n        }\n        const staticSystemPrompt = `You are Travel-Rizz, a friendly and helpful travel assistant guiding users through 5 stages of trip planning.\n    \n\n    # Travel-Rizz Itinerary Planner AI Framework - Comprehensive Guide\n\n    ## 1.0 Core Setup\n\n    You as an itinerary planner processes a few key 'MESSAGE PARAMETERS' from each user message: 'currentDetails', 'savedPlaces', and 'currentStage'. \n    The 'currentDetails' parameter encompasses the user's travel specifications, including their chosen destination, travel dates, budget allocation, specific preferences, and itinerary language. \n    The 'savedPlaces' parameter maintains an array of locations that the system automatically stores when the place browsing tools - 'carousel' or 'placeCard' - are called. \n    The 'currentStage' parameter tracks the user's progress through the 5-stage planning process, they are:\n    - INITIAL PARAMETER CHECK (Stage 1)\n    - CITY INTRODUCTION (Stage 2)\n    - PLACES BROWSING AND INTRODUCTION (Stage 3)\n    - ITINERARY REVIEW (Stage 4)\n    - FINAL CONFIRMATION (Stage 5)\n\n    Your ultimate goal is to maintain fluid conversation flow while guiding users through their trip planning journey.\n    Focus on providing information and asking questions, but NEVER provide options for users to choose from.\n    There is another AI, Quick-Rizz, that will provide suitable options for users to choose from based on your responses. \n    There are tools available to you to help you achieve this goal, which you will learn about in the following sections.\n\n    ### 1.1 Core Operating Principles\n\n    It is extremely important that you understand the current context of the conversation and act accordingly.\n    If in doubt, refer to the messages array to study messages history to help you understand the current conversation progress.\n    \n    Each tool trigger must conclude with a brief confirmation message.\n    If possible, provide a short summary of the tool's result.\n    Multiple triggers of the same tool without clear purpose are strictly prohibited.\n    \n    Flow management requires consistent adherence to intended stage progression.\n    When users deviate from the expected flow, their request should be acknowledged, then you should guide them back to the intended progression.\n\n    ## 2.0 Conversation Stages\n\n    ### 2.1 Stage Progression\n\n    CRITICAL: Stage progression must follow these exact steps:\n    1. When all criteria for a stage are met, STOP and ask the user if they want to proceed\n    2. If user is staying at the current stage for further conversation, ALWAYS push the conversation to the next stage at the end of a response\n    2. Wait for explicit user confirmation (e.g. \"Yes, let's proceed\", \"Yes, let's move on\" \"proceed to the next stage\")\n    3. Only after user confirms, then trigger 'stageProgress' tool\n    4. After stageProgress succeeds, proceed with next stage content\n\n    Example flow:\n    Assistant: \"I see all the details are in place. Would you like to proceed with the city introduction?\"\n    User: \"Yes, let's proceed\"\n    Assistant: [Triggers stageProgress] \"Great! Let me tell you about Istanbul...\"\n\n    NEVER EVER skip these steps or proceed to the next stage's content without user confirmation.\n    Keep responses brief and never reveal stage numbers to users.\n\n    The 'INITIAL PARAMETER CHECK' (Stage 1) only verifies the existence of all required parameters before proceeding with trip planning. \n    These essential parameters include 'destination', 'startDate', 'endDate', 'budget', and 'preference'.\n    If all parameters are present, ask user if they want to change anything. If not, guide users to the next stage.\n    If user confirms to proceed, you MUST trigger the 'stageProgress' tool to advance to the next stage.\n    Otherwise, you should guide users to complete any missing information.\n\n    The 'CITY INTRODUCTION' (Stage 2) provides an overview of the destination city.\n    At this stage, you should prompt users if they want to see more information about the city, like the weather information, currency conversion rate, local customs, etc.\n    Multiple tools can be used to provide these information, such as 'weatherChart' tool, 'currencyConverterTool' tool, etc.\n    After user enquires for these information, guide them to the next stage.\n    If user agrees to advance to the next stage, you MUST trigger the 'stageProgress' tool to advance to the next stage.\n    Otherwise, you should provide the information of the city to the user.\n\n    The 'PLACES BROWSING AND INTRODUCTION' (Stage 3) facilitates user discovery of preference-matched locations.\n    The initial entry to the stage follows a precise sequence: a brief welcome, followed by a 'carousel' tool calling.\n    Then, provide place descriptions text message formatted with markdown. Do not attach place images in the text message.\n    The later ongoing flow handles place browsing requests based on user preferences while tracking 'savedPlaces' count.\n    Everytime you trigger the tool 'carousel', always follow up with an acknowledgement message and the place descriptions.\n    When user asks to see their saved places (e.g. \"show me the saved places\"), you MUST use the 'savedPlacesCarousel' tool with the current savedPlaces array.\n    If user agrees to advance to the next stage, you MUST trigger the 'stageProgress' tool to advance to the next stage.\n    Otherwise, you should guide users to explore more places based on their preferences.\n\n    The 'ITINERARY REVIEW' (Stage 4) focuses on organizing saved places into a coherent trip plan. \n    This stage requires payment confirmation before advancing.\n\n    The 'FINAL CONFIRMATION' (Stage 5) handles trip detail finalization and preparations, marking the end of the progression sequence.\n\n    ## 3.0 Tools Calling and Usag\n\n    ### 3.1 Available Tools\n\n    For direct parameter requests from user, specific tools should be employed. These tools allow user to update their trip parameters.\n    These tools include:\n    - 'budgetSelectorTool': Budget options. Call this when users want to change their budget level.\n    - 'datePickerTool': Date selection. Call this when users want to change their travel dates.\n    - 'preferenceSelectorTool': Travel preferences. Call this when users want to change their travel preferences.\n    - 'languageSelectorTool': PDF language settings. Call this when users want to change the language.\n\n    The 'Places Discovery Tools' comprise:\n    - 'placeCard': Single place display when user ask for one place (e.g. \"add one cafe\" or \"show me one restaurant\"), automatically saves place after display\n    - 'carousel': Multiple places display when user ask for multiple places (e.g. \"add some museums\" or \"show me a few cinemas\"), automatically saves places after display\n    - 'savedPlacesList': View ALL previously saved places. When user asks to see saved places, pass ALL places from the savedPlaces parameter to this tool.\n\n    Additional tools include:\n    - 'weatherChart' for historical weather data for the same period from last year, can be called in stage 2\n    - 'currencyConverterTool' for displaying live currency conversion rates. When discussing currency or costs, use this tool to show the converter component. DO NOT write out or mention the exchange rates conversion in the message, the Converter component will handle it.\n    - 'stageProgress' for stage advancement after user confirmation\n\n    ## 4.0 Response Rules and Formatting\n\n    ### 4.1 Language and Format\n    - Always respond in English\n    - Use markdown for formatting\n    - Keep responses concise and informative\n\n    ### 4.2 Messaging Structure\n    - One acknowledgment per action\n\n    ### 4.3 Response Formatting for Place Descriptions after 'carousel'\n    - follow this specific structure (Markdown format):\n    \n      #Places to Explore\n      ##1. (Place Name)\n      (Brief description)\n      ##2. (Place Name)\n      (Brief description) \n\n    ### 4.4 ELEMENTS PROHIBITED AT ALL TIMES (###IMPORTANT):\n    - \"Would you like to...\", \"What would you prefer...\", \"Do you want to...\", \"Now that you've seen...\" or other similar phrases\n    - \"Please select an option...\", \"Please select how...\", \"You can now choose from the following...\" or other similar prompts that ask user to select options\n    - Any sentence ending with \"?\"or open-ended questions\n    - \"Save these places\", \"Save any of these places\", or other similar phrases related to adding and saving places\n    - Showing saved places in text form instead of using the savedPlacesCarousel tool\n    - addresses or hyperlinks for places in messages/place descriptions\n    - image and image links in messages/place descriptions\n    - stage numbers in messages\n    - any thing about stage\n    - any thing about the tool triggered like [Triggering carousel...]\n    - numbered or bulleted choice lists in messages\n    - raw tool parameters in message text\n    - mixing place descriptions with tool calls\n    - adding any text between descriptions and tool calls\n    - including JSON or tool syntax in visible messages\n\n    ### 4.5 Automatic Places Saving Functions\n    - Places are automatically saved when using 'placeCard'/'carousel', and map markers appear automatically.\n    - Do not announce these automated actions or ask users to save places.`;\n        const dynamicContext = `Current Planning Context:\n      - Destination: ${body.currentDetails.destination}\n      - Current Planning Stage: ${body.currentStage}\n      - Dates: ${body.currentDetails.startDate} to ${body.currentDetails.endDate}\n      - Budget: ${body.currentDetails.budget}\n      - Preferences: ${body.currentDetails.preferences?.join(\", \")}\n      - PDF Export Language: ${body.currentDetails.language}\n      - Saved Places Count: ${typedSavedPlaces.length}\n      - Total User Prompts: ${body.metrics?.totalPrompts || 0}\n      - Stage 3 Prompts: ${body.metrics?.stagePrompts?.[3] || 0}\n      - Payment Status: ${body.metrics?.isPaid ? \"Paid\" : \"Not Paid\"}\n\n      IMPORTANT: In stage 3, if the user has made 5 or more prompts and is not paid:\n      1. Thank them for their interest\n      2. Inform them they've reached the free limit\n      3. Suggest upgrading to unlock unlimited places\n      4. Use the stageProgress tool to move to stage 4`;\n        console.log(\"[chat] Processing request:\", {\n            messageCount: body.messages.length,\n            destination: body.currentDetails.destination\n        });\n        // Get AI response\n        const result = (0,ai__WEBPACK_IMPORTED_MODULE_1__.streamText)({\n            // const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n            // model: openai('gpt-4o'),\n            model: (0,_ai_sdk_openai__WEBPACK_IMPORTED_MODULE_0__.openai)(\"gpt-4o-mini\"),\n            // model: groq('llama-3.1-8b-instant'),\n            // model: groq('llama-3.3-70b-versatile'),\n            // model: genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" }),\n            messages: [\n                {\n                    role: \"system\",\n                    content: staticSystemPrompt\n                },\n                {\n                    role: \"system\",\n                    content: dynamicContext\n                },\n                ...body.messages\n            ],\n            maxTokens: 2000,\n            temperature: 0.5,\n            presencePenalty: 0.7,\n            frequencyPenalty: 0.3,\n            maxSteps: 10,\n            experimental_transform: (0,ai__WEBPACK_IMPORTED_MODULE_1__.smoothStream)({\n                delayInMs: 70\n            }),\n            tools: _ai_tools__WEBPACK_IMPORTED_MODULE_2__.tools\n        });\n        // Set appropriate headers for streaming\n        res.setHeader(\"Content-Type\", \"text/event-stream\");\n        res.setHeader(\"Cache-Control\", \"no-cache\");\n        res.setHeader(\"Connection\", \"keep-alive\");\n        // Stream the response\n        for await (const chunk of result.toDataStreamResponse()){\n            res.write(chunk);\n        }\n        res.end();\n    } catch (error) {\n        console.error(\"Chat API Error:\", error);\n        res.status(500).json({\n            error: \"Internal server error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat/index.ts\n");

/***/ }),

/***/ "(api)/./utils/currency-utils.ts":
/*!*********************************!*\
  !*** ./utils/currency-utils.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchExchangeRates: () => (/* binding */ fetchExchangeRates),\n/* harmony export */   formatCurrencyAmount: () => (/* binding */ formatCurrencyAmount),\n/* harmony export */   getCachedRates: () => (/* binding */ getCachedRates),\n/* harmony export */   getCurrencyFromCountry: () => (/* binding */ getCurrencyFromCountry)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/managers/types */ \"(api)/./managers/types.ts\");\n\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\nconst CACHE_KEY = \"currency_cache\";\nasync function fetchExchangeRates(baseCurrency) {\n    // Try to get cached data first\n    const cachedData = getCachedRates(baseCurrency);\n    if (cachedData) {\n        return cachedData;\n    }\n    try {\n        const response = await fetch(`/api/currency/rates?baseCurrency=${encodeURIComponent(baseCurrency)}`, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            // Add cache control\n            cache: \"no-cache\",\n            credentials: \"same-origin\"\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.data || typeof data.data !== \"object\") {\n            throw new Error(\"Invalid API response format\");\n        }\n        // Cache the response\n        const cache = {\n            timestamp: Date.now(),\n            rates: data.data,\n            baseCurrency\n        };\n        sessionStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n        return data.data;\n    } catch (error) {\n        console.error(\"Error fetching exchange rates:\", error);\n        throw error;\n    }\n}\nfunction getCachedRates(baseCurrency) {\n    try {\n        const cacheStr = sessionStorage.getItem(CACHE_KEY);\n        if (!cacheStr) return null;\n        const cache = JSON.parse(cacheStr);\n        // Check if cache is expired or for a different base currency\n        if (Date.now() - cache.timestamp > CACHE_DURATION || cache.baseCurrency !== baseCurrency) {\n            sessionStorage.removeItem(CACHE_KEY);\n            return null;\n        }\n        return cache.rates;\n    } catch  {\n        return null;\n    }\n}\nfunction formatCurrencyAmount(amount, currency) {\n    const info = _managers_types__WEBPACK_IMPORTED_MODULE_0__.CURRENCY_INFO[currency];\n    if (!info) return `${currency} ${amount.toFixed(2)}`;\n    const { symbol, position } = info;\n    const formatted = amount.toFixed(2);\n    return position === \"before\" ? `${symbol}${formatted}` : `${formatted} ${symbol}`;\n}\nfunction getCurrencyFromCountry(country) {\n    // Map countries to their currencies\n    const countryToCurrency = {\n        \"Singapore\": \"SGD\",\n        \"Malaysia\": \"MYR\",\n        \"United States\": \"USD\",\n        \"Japan\": \"JPY\",\n        \"China\": \"CNY\",\n        \"United Kingdom\": \"GBP\",\n        \"European Union\": \"EUR\",\n        \"Australia\": \"AUD\",\n        \"Canada\": \"CAD\",\n        \"South Korea\": \"KRW\"\n    };\n    // Extract country from destination string (e.g., \"Tokyo, Japan\" -> \"Japan\")\n    const parts = country.split(\",\");\n    const countryName = parts[parts.length - 1]?.trim() || country.trim();\n    return countryToCurrency[countryName] || \"USD\"; // Default to USD if country not found\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9jdXJyZW5jeS11dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRTtBQUVoRSxNQUFNQyxpQkFBaUIsS0FBSyxLQUFLLEtBQUssTUFBTSwyQkFBMkI7QUFDdkUsTUFBTUMsWUFBWTtBQUVYLGVBQWVDLG1CQUFtQkMsWUFBb0I7SUFDekQsK0JBQStCO0lBQy9CLE1BQU1DLGFBQWFDLGVBQWVGO0lBQ2xDLElBQUlDLFlBQVk7UUFDWixPQUFPQTtJQUNYO0lBRUEsSUFBSTtRQUNBLE1BQU1FLFdBQVcsTUFBTUMsTUFDbkIsQ0FBQyxpQ0FBaUMsRUFBRUMsbUJBQW1CTCxjQUFjLENBQUMsRUFDdEU7WUFDSU0sUUFBUTtZQUNSQyxTQUFTO2dCQUNMLFVBQVU7Z0JBQ1YsZ0JBQWdCO1lBQ3BCO1lBQ0Esb0JBQW9CO1lBQ3BCQyxPQUFPO1lBQ1BDLGFBQWE7UUFDakI7UUFHSixJQUFJLENBQUNOLFNBQVNPLEVBQUUsRUFBRTtZQUNkLE1BQU0sSUFBSUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFUixTQUFTUyxNQUFNLENBQUMsQ0FBQztRQUM1RDtRQUVBLE1BQU1DLE9BQU8sTUFBTVYsU0FBU1csSUFBSTtRQUNoQyxJQUFJLENBQUNELEtBQUtBLElBQUksSUFBSSxPQUFPQSxLQUFLQSxJQUFJLEtBQUssVUFBVTtZQUM3QyxNQUFNLElBQUlGLE1BQU07UUFDcEI7UUFFQSxxQkFBcUI7UUFDckIsTUFBTUgsUUFBdUI7WUFDekJPLFdBQVdDLEtBQUtDLEdBQUc7WUFDbkJDLE9BQU9MLEtBQUtBLElBQUk7WUFDaEJiO1FBQ0o7UUFDQW1CLGVBQWVDLE9BQU8sQ0FBQ3RCLFdBQVd1QixLQUFLQyxTQUFTLENBQUNkO1FBRWpELE9BQU9LLEtBQUtBLElBQUk7SUFDcEIsRUFBRSxPQUFPVSxPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2hELE1BQU1BO0lBQ1Y7QUFDSjtBQUVPLFNBQVNyQixlQUFlRixZQUFvQjtJQUMvQyxJQUFJO1FBQ0EsTUFBTXlCLFdBQVdOLGVBQWVPLE9BQU8sQ0FBQzVCO1FBQ3hDLElBQUksQ0FBQzJCLFVBQVUsT0FBTztRQUV0QixNQUFNakIsUUFBdUJhLEtBQUtNLEtBQUssQ0FBQ0Y7UUFFeEMsNkRBQTZEO1FBQzdELElBQ0lULEtBQUtDLEdBQUcsS0FBS1QsTUFBTU8sU0FBUyxHQUFHbEIsa0JBQy9CVyxNQUFNUixZQUFZLEtBQUtBLGNBQ3pCO1lBQ0VtQixlQUFlUyxVQUFVLENBQUM5QjtZQUMxQixPQUFPO1FBQ1g7UUFFQSxPQUFPVSxNQUFNVSxLQUFLO0lBQ3RCLEVBQUUsT0FBTTtRQUNKLE9BQU87SUFDWDtBQUNKO0FBRU8sU0FBU1cscUJBQXFCQyxNQUFjLEVBQUVDLFFBQWdCO0lBQ2pFLE1BQU1DLE9BQU9wQywwREFBYSxDQUFDbUMsU0FBUztJQUNwQyxJQUFJLENBQUNDLE1BQU0sT0FBTyxDQUFDLEVBQUVELFNBQVMsQ0FBQyxFQUFFRCxPQUFPRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBRXBELE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0g7SUFDN0IsTUFBTUksWUFBWU4sT0FBT0csT0FBTyxDQUFDO0lBRWpDLE9BQU9FLGFBQWEsV0FBVyxDQUFDLEVBQUVELE9BQU8sRUFBRUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxVQUFVLENBQUMsRUFBRUYsT0FBTyxDQUFDO0FBQ3JGO0FBRU8sU0FBU0csdUJBQXVCQyxPQUFlO0lBQ2xELG9DQUFvQztJQUNwQyxNQUFNQyxvQkFBK0M7UUFDakQsYUFBYTtRQUNiLFlBQVk7UUFDWixpQkFBaUI7UUFDakIsU0FBUztRQUNULFNBQVM7UUFDVCxrQkFBa0I7UUFDbEIsa0JBQWtCO1FBQ2xCLGFBQWE7UUFDYixVQUFVO1FBQ1YsZUFBZTtJQUVuQjtJQUVBLDRFQUE0RTtJQUM1RSxNQUFNQyxRQUFRRixRQUFRRyxLQUFLLENBQUM7SUFDNUIsTUFBTUMsY0FBY0YsS0FBSyxDQUFDQSxNQUFNRyxNQUFNLEdBQUcsRUFBRSxFQUFFQyxVQUFVTixRQUFRTSxJQUFJO0lBRW5FLE9BQU9MLGlCQUFpQixDQUFDRyxZQUFZLElBQUksT0FBTyxzQ0FBc0M7QUFDMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmF2ZWwtcml6ei8uL3V0aWxzL2N1cnJlbmN5LXV0aWxzLnRzP2Y2MTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3VycmVuY3lDYWNoZSwgQ1VSUkVOQ1lfSU5GTyB9IGZyb20gJ0AvbWFuYWdlcnMvdHlwZXMnO1xuXG5jb25zdCBDQUNIRV9EVVJBVElPTiA9IDI0ICogNjAgKiA2MCAqIDEwMDA7IC8vIDI0IGhvdXJzIGluIG1pbGxpc2Vjb25kc1xuY29uc3QgQ0FDSEVfS0VZID0gJ2N1cnJlbmN5X2NhY2hlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoRXhjaGFuZ2VSYXRlcyhiYXNlQ3VycmVuY3k6IHN0cmluZyk6IFByb21pc2U8eyBba2V5OiBzdHJpbmddOiBudW1iZXIgfT4ge1xuICAgIC8vIFRyeSB0byBnZXQgY2FjaGVkIGRhdGEgZmlyc3RcbiAgICBjb25zdCBjYWNoZWREYXRhID0gZ2V0Q2FjaGVkUmF0ZXMoYmFzZUN1cnJlbmN5KTtcbiAgICBpZiAoY2FjaGVkRGF0YSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkRGF0YTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgYC9hcGkvY3VycmVuY3kvcmF0ZXM/YmFzZUN1cnJlbmN5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGJhc2VDdXJyZW5jeSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIEFkZCBjYWNoZSBjb250cm9sXG4gICAgICAgICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgaWYgKCFkYXRhLmRhdGEgfHwgdHlwZW9mIGRhdGEuZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBUEkgcmVzcG9uc2UgZm9ybWF0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENhY2hlIHRoZSByZXNwb25zZVxuICAgICAgICBjb25zdCBjYWNoZTogQ3VycmVuY3lDYWNoZSA9IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHJhdGVzOiBkYXRhLmRhdGEsXG4gICAgICAgICAgICBiYXNlQ3VycmVuY3lcbiAgICAgICAgfTtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShDQUNIRV9LRVksIEpTT04uc3RyaW5naWZ5KGNhY2hlKSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGEuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBleGNoYW5nZSByYXRlczonLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlZFJhdGVzKGJhc2VDdXJyZW5jeTogc3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSB8IG51bGwge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhY2hlU3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShDQUNIRV9LRVkpO1xuICAgICAgICBpZiAoIWNhY2hlU3RyKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBjYWNoZTogQ3VycmVuY3lDYWNoZSA9IEpTT04ucGFyc2UoY2FjaGVTdHIpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgY2FjaGUgaXMgZXhwaXJlZCBvciBmb3IgYSBkaWZmZXJlbnQgYmFzZSBjdXJyZW5jeVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBEYXRlLm5vdygpIC0gY2FjaGUudGltZXN0YW1wID4gQ0FDSEVfRFVSQVRJT04gfHxcbiAgICAgICAgICAgIGNhY2hlLmJhc2VDdXJyZW5jeSAhPT0gYmFzZUN1cnJlbmN5XG4gICAgICAgICkge1xuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShDQUNIRV9LRVkpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGUucmF0ZXM7XG4gICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEN1cnJlbmN5QW1vdW50KGFtb3VudDogbnVtYmVyLCBjdXJyZW5jeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBpbmZvID0gQ1VSUkVOQ1lfSU5GT1tjdXJyZW5jeV07XG4gICAgaWYgKCFpbmZvKSByZXR1cm4gYCR7Y3VycmVuY3l9ICR7YW1vdW50LnRvRml4ZWQoMil9YDtcblxuICAgIGNvbnN0IHsgc3ltYm9sLCBwb3NpdGlvbiB9ID0gaW5mbztcbiAgICBjb25zdCBmb3JtYXR0ZWQgPSBhbW91bnQudG9GaXhlZCgyKTtcblxuICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ2JlZm9yZScgPyBgJHtzeW1ib2x9JHtmb3JtYXR0ZWR9YCA6IGAke2Zvcm1hdHRlZH0gJHtzeW1ib2x9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbmN5RnJvbUNvdW50cnkoY291bnRyeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBNYXAgY291bnRyaWVzIHRvIHRoZWlyIGN1cnJlbmNpZXNcbiAgICBjb25zdCBjb3VudHJ5VG9DdXJyZW5jeTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAgICAgJ1NpbmdhcG9yZSc6ICdTR0QnLFxuICAgICAgICAnTWFsYXlzaWEnOiAnTVlSJyxcbiAgICAgICAgJ1VuaXRlZCBTdGF0ZXMnOiAnVVNEJyxcbiAgICAgICAgJ0phcGFuJzogJ0pQWScsXG4gICAgICAgICdDaGluYSc6ICdDTlknLFxuICAgICAgICAnVW5pdGVkIEtpbmdkb20nOiAnR0JQJyxcbiAgICAgICAgJ0V1cm9wZWFuIFVuaW9uJzogJ0VVUicsXG4gICAgICAgICdBdXN0cmFsaWEnOiAnQVVEJyxcbiAgICAgICAgJ0NhbmFkYSc6ICdDQUQnLFxuICAgICAgICAnU291dGggS29yZWEnOiAnS1JXJyxcbiAgICAgICAgLy8gQWRkIG1vcmUgYXMgbmVlZGVkXG4gICAgfTtcblxuICAgIC8vIEV4dHJhY3QgY291bnRyeSBmcm9tIGRlc3RpbmF0aW9uIHN0cmluZyAoZS5nLiwgXCJUb2t5bywgSmFwYW5cIiAtPiBcIkphcGFuXCIpXG4gICAgY29uc3QgcGFydHMgPSBjb3VudHJ5LnNwbGl0KCcsJyk7XG4gICAgY29uc3QgY291bnRyeU5hbWUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXT8udHJpbSgpIHx8IGNvdW50cnkudHJpbSgpO1xuICAgIFxuICAgIHJldHVybiBjb3VudHJ5VG9DdXJyZW5jeVtjb3VudHJ5TmFtZV0gfHwgJ1VTRCc7IC8vIERlZmF1bHQgdG8gVVNEIGlmIGNvdW50cnkgbm90IGZvdW5kXG59XG4iXSwibmFtZXMiOlsiQ1VSUkVOQ1lfSU5GTyIsIkNBQ0hFX0RVUkFUSU9OIiwiQ0FDSEVfS0VZIiwiZmV0Y2hFeGNoYW5nZVJhdGVzIiwiYmFzZUN1cnJlbmN5IiwiY2FjaGVkRGF0YSIsImdldENhY2hlZFJhdGVzIiwicmVzcG9uc2UiLCJmZXRjaCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1ldGhvZCIsImhlYWRlcnMiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInJhdGVzIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImVycm9yIiwiY29uc29sZSIsImNhY2hlU3RyIiwiZ2V0SXRlbSIsInBhcnNlIiwicmVtb3ZlSXRlbSIsImZvcm1hdEN1cnJlbmN5QW1vdW50IiwiYW1vdW50IiwiY3VycmVuY3kiLCJpbmZvIiwidG9GaXhlZCIsInN5bWJvbCIsInBvc2l0aW9uIiwiZm9ybWF0dGVkIiwiZ2V0Q3VycmVuY3lGcm9tQ291bnRyeSIsImNvdW50cnkiLCJjb3VudHJ5VG9DdXJyZW5jeSIsInBhcnRzIiwic3BsaXQiLCJjb3VudHJ5TmFtZSIsImxlbmd0aCIsInRyaW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/currency-utils.ts\n");

/***/ }),

/***/ "(api)/./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   filterUniquePlaces: () => (/* binding */ filterUniquePlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   metricsManager: () => (/* binding */ metricsManager),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   savedPlacesManager: () => (/* binding */ savedPlacesManager),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"(api)/./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"(api)/./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return place.displayName?.text || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"undefined\" !== \"undefined\") {}\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place?.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        getPlaceById (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.get(id);\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            if (place?.id && places.has(place.id)) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        updatePlaces (updatedPlaces) {\n            loadFromStorage(); // Ensure places are loaded\n            updatedPlaces.forEach((place)=>{\n                if (place?.id) {\n                    places.set(place.id, place);\n                }\n            });\n            this._persist();\n            this._notifyChange();\n        },\n        _persist () {\n            if (false) {}\n        },\n        _notifyChange () {\n            if (false) {}\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (false) {}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? `different ${searchText} in ${cityName}` : `${searchText} ${cityName}`;\n    console.log(`[searchWithStrategy] Using ${useAlternateSearch ? \"alternate\" : \"original\"} search:`, query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.places?.[0]) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: data.places[0].displayName?.text || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!result?.places?.[0]) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (true) {\n        return {\n            sessionId: \"\",\n            startTime: Date.now(),\n            lastActive: Date.now(),\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n            destination: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            preferences: [],\n            budget: \"\",\n            language: \"\",\n            transport: [],\n            savedPlaces: [],\n            currentStage: 1,\n            totalPrompts: 0,\n            stagePrompts: {\n                1: 0,\n                2: 0,\n                3: 0\n            },\n            savedPlacesCount: 0,\n            isPaid: false,\n            paymentReference: \"\"\n        };\n    }\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (true) return;\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: place.photos?.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = place.displayName?.text ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/places-utils.ts\n");

/***/ }),

/***/ "(api)/./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SESSION_CONFIG: () => (/* binding */ SESSION_CONFIG),\n/* harmony export */   checkInputLimits: () => (/* binding */ checkInputLimits),\n/* harmony export */   checkSession: () => (/* binding */ checkSession),\n/* harmony export */   checkSessionValidity: () => (/* binding */ checkSessionValidity),\n/* harmony export */   checkSessionWithWarning: () => (/* binding */ checkSessionWithWarning),\n/* harmony export */   clearPaymentReference: () => (/* binding */ clearPaymentReference),\n/* harmony export */   clearSession: () => (/* binding */ clearSession),\n/* harmony export */   generateSessionId: () => (/* binding */ generateSessionId),\n/* harmony export */   getPaymentReference: () => (/* binding */ getPaymentReference),\n/* harmony export */   getPaymentReferenceId: () => (/* binding */ getPaymentReferenceId),\n/* harmony export */   getPaymentStatus: () => (/* binding */ getPaymentStatus),\n/* harmony export */   getStorage: () => (/* binding */ getStorage),\n/* harmony export */   getStoredMetrics: () => (/* binding */ getStoredMetrics),\n/* harmony export */   getStoredSession: () => (/* binding */ getStoredSession),\n/* harmony export */   handleSessionExpiry: () => (/* binding */ handleSessionExpiry),\n/* harmony export */   initializeSession: () => (/* binding */ initializeSession),\n/* harmony export */   safeStorageOp: () => (/* binding */ safeStorageOp),\n/* harmony export */   setPaymentReference: () => (/* binding */ setPaymentReference),\n/* harmony export */   setPaymentReferenceId: () => (/* binding */ setPaymentReferenceId),\n/* harmony export */   setPaymentStatus: () => (/* binding */ setPaymentStatus),\n/* harmony export */   storage: () => (/* binding */ storage),\n/* harmony export */   updateLastActive: () => (/* binding */ updateLastActive),\n/* harmony export */   updateSessionLocation: () => (/* binding */ updateSessionLocation),\n/* harmony export */   updateStoredMetrics: () => (/* binding */ updateStoredMetrics)\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"(api)/./managers/stage-manager.ts\");\n\nconst SESSION_CONFIG = {\n    STORAGE_KEY: \"travel_rizz_session\",\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    MAX_TOTAL_INPUTS: 15,\n    PAYMENT_REF_KEY: \"payment_reference_id\"\n};\n// Safe storage access\nconst getStorage = ()=>{\n    if (false) {}\n    return null;\n};\nconst storage = getStorage();\n// Helper function to safely access storage\nconst safeStorageOp = (operation, defaultValue)=>{\n    try {\n        if (!storage) return defaultValue;\n        return operation();\n    } catch (error) {\n        console.error(\"[Session] Storage operation failed:\", error);\n        return defaultValue;\n    }\n};\nfunction initializeSession() {\n    const now = Date.now();\n    // Try to get existing session first\n    const existingSession = safeStorageOp(()=>{\n        const stored = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        return stored ? JSON.parse(stored) : null;\n    }, null);\n    if (existingSession) {\n        // Update both lastActive and expiresAt\n        existingSession.lastActive = now;\n        existingSession.expiresAt = now + SESSION_CONFIG.ABSOLUTE_TIMEOUT;\n        // Ensure all stages are initialized\n        existingSession.stagePrompts = existingSession.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        };\n        safeStorageOp(()=>{\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(existingSession));\n        }, undefined);\n        return existingSession;\n    }\n    // Create new session if none exists\n    const sessionId = generateSessionId();\n    const session = {\n        // Session info\n        sessionId,\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n        // Travel details\n        destination: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: [],\n        budget: \"\",\n        language: \"\",\n        transport: [],\n        location: {\n            latitude: 0,\n            longitude: 0\n        },\n        // Places\n        savedPlaces: [],\n        currentStage: 1,\n        // Metrics\n        totalPrompts: 0,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        },\n        savedPlacesCount: 0,\n        // Payment\n        isPaid: false,\n        paymentReference: `session_${sessionId}`\n    };\n    safeStorageOp(()=>{\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n    return session;\n}\nfunction getStoredSession() {\n    return safeStorageOp(()=>{\n        // console.log('[Session] Attempting to get stored session');\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No stored session data found\");\n            return null;\n        }\n        try {\n            const session = JSON.parse(storedData);\n            // console.log('[Session] Successfully parsed session:', {\n            //   sessionId: session.sessionId,\n            //   destination: session.destination,\n            //   startTime: new Date(session.startTime).toISOString(),\n            //   lastActive: new Date(session.lastActive).toISOString(),\n            //   expiresAt: new Date(session.expiresAt).toISOString()\n            // });\n            return session;\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session data:\", error);\n            return null;\n        }\n    }, null);\n}\nfunction getStoredMetrics() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) return null;\n        return {\n            interaction: {\n                totalPrompts: session.totalPrompts,\n                stagePrompts: session.stagePrompts,\n                lastActive: session.lastActive\n            },\n            places: {\n                savedCount: session.savedPlacesCount\n            },\n            payment: {\n                status: session.isPaid,\n                reference: session.paymentReference,\n                timestamp: session.paymentTimestamp\n            },\n            parameters: {\n                destination: session.destination,\n                dates: {\n                    start: session.startDate,\n                    end: session.endDate\n                },\n                preferences: session.preferences,\n                budget: session.budget,\n                language: session.language,\n                transport: session.transport\n            }\n        };\n    }, null);\n}\nfunction updateStoredMetrics(currentStage, incrementPrompt = false, incrementSavedPlaces = false) {\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        if (incrementPrompt) {\n            // Initialize stagePrompts with all stages if it doesn't exist\n            if (!session.stagePrompts) {\n                session.stagePrompts = {\n                    1: 0,\n                    2: 0,\n                    3: 0,\n                    4: 0,\n                    5: 0\n                };\n            }\n            // Ensure all stages exist\n            for(let stage = 1; stage <= 5; stage++){\n                if (typeof session.stagePrompts[stage] !== \"number\") {\n                    session.stagePrompts[stage] = 0;\n                }\n            }\n            session.totalPrompts = (session.totalPrompts || 0) + 1;\n            session.stagePrompts[currentStage] = (session.stagePrompts[currentStage] || 0) + 1;\n        }\n        if (incrementSavedPlaces) {\n            session.savedPlacesCount = (session.savedPlacesCount || 0) + 1;\n        }\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        return session;\n    }, null) || initializeSession();\n}\nfunction checkInputLimits(currentStage) {\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        const stagePrompts = session.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        const totalPrompts = session.totalPrompts || 0;\n        return {\n            withinStageLimit: currentStage === 3 ? (stagePrompts[currentStage] || 0) < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n            withinTotalLimit: currentStage === 3 ? totalPrompts < SESSION_CONFIG.MAX_TOTAL_INPUTS : true,\n            stageInputCount: stagePrompts[currentStage] || 0,\n            totalInputCount: totalPrompts\n        };\n    }, {\n        withinStageLimit: true,\n        withinTotalLimit: true,\n        stageInputCount: 0,\n        totalInputCount: 0\n    });\n}\n// Payment related functions\nfunction setPaymentStatus(isPaid) {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.isPaid = isPaid;\n        session.paymentTimestamp = isPaid ? Date.now() : undefined;\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentStatus() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return session?.isPaid || false;\n    }, false);\n}\nfunction setPaymentReference(reference) {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = reference;\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentReference() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return session?.paymentReference;\n    }, undefined);\n}\nfunction clearPaymentReference() {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = \"\";\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentReferenceId() {\n    return safeStorageOp(()=>{\n        const stored = storage?.getItem(SESSION_CONFIG.PAYMENT_REF_KEY);\n        return stored || null;\n    }, null);\n}\nfunction setPaymentReferenceId(referenceId) {\n    safeStorageOp(()=>{\n        storage?.setItem(SESSION_CONFIG.PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Session] Stored payment reference ID:\", referenceId);\n    }, undefined);\n}\nfunction checkSession() {\n    return safeStorageOp(()=>{\n        const currentSession = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!currentSession) {\n            const newSession = Date.now().toString();\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, newSession);\n            return false;\n        }\n        return true;\n    }, false);\n}\n// Add warning mechanism\nfunction checkSessionWithWarning() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        const now = Date.now();\n        const timeLeft = session.expiresAt - now;\n        const shouldWarn = timeLeft <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT;\n        const isValid = timeLeft > 0;\n        return {\n            isValid,\n            shouldWarn\n        };\n    }, {\n        isValid: false,\n        shouldWarn: false\n    });\n}\nfunction checkSessionValidity() {\n    return safeStorageOp(()=>{\n        console.log(\"[Session] Checking session validity\");\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No session found during validity check\");\n            return false;\n        }\n        let session;\n        try {\n            session = JSON.parse(storedData);\n            console.log(\"[Session] Parsed session for validity check:\", {\n                sessionId: session.sessionId,\n                destination: session.destination,\n                startTime: new Date(session.startTime).toISOString(),\n                lastActive: new Date(session.lastActive).toISOString(),\n                expiresAt: new Date(session.expiresAt).toISOString()\n            });\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session during validity check:\", error);\n            return false;\n        }\n        const now = Date.now();\n        console.log(\"[Session] Validity check times:\", {\n            now: new Date(now).toISOString(),\n            expiresAt: new Date(session.expiresAt).toISOString(),\n            lastActive: new Date(session.lastActive).toISOString(),\n            timeTillExpiry: session.expiresAt - now,\n            inactiveTime: now - session.lastActive,\n            absoluteTimeout: SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n            inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n        });\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            console.log(\"[Session] Session expired due to absolute timeout. Times:\", {\n                now,\n                expiresAt: session.expiresAt,\n                diff: now - session.expiresAt\n            });\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        const inactiveTime = now - session.lastActive;\n        if (inactiveTime >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            console.log(\"[Session] Session expired due to inactivity. Times:\", {\n                now,\n                lastActive: session.lastActive,\n                inactiveTime,\n                inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n            });\n            clearSession();\n            return false;\n        }\n        // Only update lastActive if it's been more than 1 minute\n        if (inactiveTime > 60000) {\n            console.log(\"[Session] Updating lastActive time in validity check\");\n            session.lastActive = now;\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        }\n        return true;\n    }, false);\n}\n// Session expiry handler\nfunction handleSessionExpiry() {\n    safeStorageOp(()=>{\n        // Don't handle expiry if we're already on the landing page\n        if (window.location.pathname === \"/\" || window.location.pathname === \"\") {\n            return;\n        }\n        // Save current state if needed\n        const currentState = {\n            messages: window.getSavedPlaces?.() || [],\n            lastUrl: window.location.pathname\n        };\n        storage?.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n        // Clear session\n        clearSession();\n        // Only redirect if we're not already on the landing page\n        const currentUrl = new URL(window.location.href);\n        if (!currentUrl.searchParams.has(\"return\")) {\n            window.location.href = `/?return=${encodeURIComponent(currentState.lastUrl)}`;\n        }\n    }, undefined);\n}\nfunction clearSession() {\n    console.log(\"[Session] Clearing session storage\");\n    safeStorageOp(()=>{\n        storage?.removeItem(SESSION_CONFIG.STORAGE_KEY);\n    }, undefined);\n}\nfunction updateLastActive() {\n    return safeStorageOp(()=>{\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No session to update lastActive\");\n            return false;\n        }\n        try {\n            const session = JSON.parse(storedData);\n            session.lastActive = Date.now();\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n            console.log(\"[Session] Successfully updated lastActive\");\n            return true;\n        } catch (error) {\n            console.error(\"[Session] Failed to update lastActive:\", error);\n            return false;\n        }\n    }, false);\n}\nfunction generateSessionId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n// Update session with location\nfunction updateSessionLocation(location) {\n    const session = getStoredSession();\n    if (!session) return;\n    session.location = location;\n    safeStorageOp(()=>{\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/session-manager.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat%2Findex.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();