"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_features_map-component_tsx"],{

/***/ "./components/features/map-component.tsx":
/*!***********************************************!*\
  !*** ./components/features/map-component.tsx ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Track current active TravelInfos\n    const [activeTravelInfos, setActiveTravelInfos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Track polylines for cleanup\n    const polylineRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            var _window_google;\n            if ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : _window_google.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker,geometry&v=beta&callback=setupMapInstance\");\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    var _window_addPlaceToMap, _window;\n                    (_window_addPlaceToMap = (_window = window).addPlaceToMap) === null || _window_addPlaceToMap === void 0 ? void 0 : _window_addPlaceToMap.call(_window, {\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                const markerId = ((_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id) || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        var // Close any existing InfoWindow\n                        _infoWindowRef_current;\n                        (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const handlePlacesChanged = async (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] Places changed:\", e.detail);\n            // Clear existing markers\n            markersRef.current.forEach((marker)=>{\n                marker.map = null;\n            });\n            markersRef.current.clear();\n            // Add new markers\n            const places = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            places.forEach((place)=>{\n                if (place.location) {\n                    const marker = createMarker(place);\n                    if (marker) {\n                        marker.map = map;\n                        markersRef.current.set(place.id, marker);\n                    }\n                }\n            });\n            // Validate and update routes when places change\n            setActiveTravelInfos((prev)=>{\n                const validTravelInfos = prev.filter((param)=>{\n                    let { fromId, toId } = param;\n                    const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n                    const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n                    // Keep only routes where both places still exist and are in the same day\n                    const isValid = (fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex) !== undefined && (toPlace === null || toPlace === void 0 ? void 0 : toPlace.dayIndex) !== undefined && fromPlace.dayIndex === toPlace.dayIndex;\n                    if (!isValid) {\n                        console.log(\"[MapComponent] Removing invalid route after places changed:\", {\n                            fromPlace: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.displayName,\n                            toPlace: toPlace === null || toPlace === void 0 ? void 0 : toPlace.displayName,\n                            fromDay: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex,\n                            toDay: toPlace === null || toPlace === void 0 ? void 0 : toPlace.dayIndex\n                        });\n                    }\n                    return isValid;\n                });\n                if (validTravelInfos.length !== prev.length) {\n                    console.log(\"[MapComponent] Routes updated after places changed:\", {\n                        before: prev.length,\n                        after: validTravelInfos.length\n                    });\n                }\n                return validTravelInfos;\n            });\n        };\n        window.addEventListener(\"places-changed\", handlePlacesChanged);\n        return ()=>{\n            window.removeEventListener(\"places-changed\", handlePlacesChanged);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const handleTravelInfoDisplay = (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] TravelInfo displayed:\", e.detail);\n            setActiveTravelInfos((prev)=>{\n                const next = [\n                    ...prev,\n                    e.detail\n                ];\n                console.log(\"[MapComponent] Active TravelInfos after display:\", next);\n                return next;\n            });\n        };\n        const handleTravelInfoHide = (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] TravelInfo hidden:\", e.detail);\n            setActiveTravelInfos((prev)=>{\n                const next = prev.filter((info)=>{\n                    // Check both combinations since order might be different\n                    const matchesForward = info.fromId === e.detail.fromId && info.toId === e.detail.toId;\n                    const matchesReverse = info.fromId === e.detail.toId && info.toId === e.detail.fromId;\n                    return !(matchesForward || matchesReverse);\n                });\n                console.log(\"[MapComponent] Active TravelInfos after hide:\", next);\n                return next;\n            });\n        };\n        window.addEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n        window.addEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        return ()=>{\n            window.removeEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n            window.removeEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        };\n    }, [\n        mapInstanceRef.current\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        console.log(\"[MapComponent] Rendering routes for TravelInfos:\", activeTravelInfos);\n        // Clear all existing polylines\n        polylineRef.current.forEach((polyline)=>polyline.setMap(null));\n        polylineRef.current.clear();\n        // First, validate that all active TravelInfos are for places in the same day\n        const validTravelInfos = activeTravelInfos.filter((param)=>{\n            let { fromId, toId } = param;\n            const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n            const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n            // Only keep routes between places in the same day\n            const isValid = (fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex) !== undefined && (toPlace === null || toPlace === void 0 ? void 0 : toPlace.dayIndex) !== undefined && fromPlace.dayIndex === toPlace.dayIndex;\n            if (!isValid) {\n                console.log(\"[MapComponent] Removing invalid route:\", {\n                    fromPlace: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.displayName,\n                    toPlace: toPlace === null || toPlace === void 0 ? void 0 : toPlace.displayName,\n                    fromDay: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex,\n                    toDay: toPlace === null || toPlace === void 0 ? void 0 : toPlace.dayIndex\n                });\n            }\n            return isValid;\n        });\n        // Update state if we removed any invalid routes\n        if (validTravelInfos.length !== activeTravelInfos.length) {\n            console.log(\"[MapComponent] Removed invalid routes:\", {\n                before: activeTravelInfos.length,\n                after: validTravelInfos.length\n            });\n            setActiveTravelInfos(validTravelInfos);\n            return; // Let the effect run again with cleaned up routes\n        }\n        // Draw routes for valid TravelInfos\n        validTravelInfos.forEach(async (param)=>{\n            let { fromId, toId } = param;\n            const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n            const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n            console.log(\"[MapComponent] Drawing route:\", {\n                fromPlace: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.displayName,\n                toPlace: toPlace === null || toPlace === void 0 ? void 0 : toPlace.displayName,\n                fromId,\n                toId,\n                dayIndex: fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex\n            });\n            if ((fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex) !== undefined && toPlace) {\n                const color = getRouteColor(fromPlace.dayIndex);\n                const polyline = await drawRoute([\n                    fromPlace,\n                    toPlace\n                ], color);\n                if (polyline) {\n                    const routeKey = \"\".concat(fromId, \"-\").concat(toId);\n                    console.log(\"[MapComponent] Route drawn:\", routeKey);\n                    polylineRef.current.set(routeKey, polyline);\n                }\n            }\n        });\n    }, [\n        activeTravelInfos\n    ]);\n    const drawRoute = async (places, color)=>{\n        if (!places || places.length !== 2 || !mapInstanceRef.current || !isGeometryReady()) return;\n        const [place1, place2] = places;\n        if (!place1.location || !place2.location) return;\n        try {\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            if (!info || !info.legPolyline) return;\n            const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n            return new google.maps.Polyline({\n                path,\n                strokeColor: color,\n                strokeOpacity: 0.8,\n                strokeWeight: 5,\n                map: mapInstanceRef.current\n            });\n        } catch (error) {\n            console.error(\"[MapComponent] Error drawing route:\", error);\n        }\n    };\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                    </div>\\n                    \").concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    const isGeometryReady = ()=>{\n        var _window_google_maps_geometry_encoding, _window_google_maps_geometry, _window_google_maps, _window_google;\n        return !!(((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_geometry = _window_google_maps.geometry) === null || _window_google_maps_geometry === void 0 ? void 0 : (_window_google_maps_geometry_encoding = _window_google_maps_geometry.encoding) === null || _window_google_maps_geometry_encoding === void 0 ? void 0 : _window_google_maps_geometry_encoding.decodePath) && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                var _results__geometry, _results_;\n                if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    const getRouteColor = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    const createMarker = (place)=>{\n        if (!place.location) {\n            console.warn(\"[MapComponent] Cannot create marker: place missing location\", place);\n            return null;\n        }\n        const pinElement = new window.google.maps.marker.PinElement({\n            background: \"#FF4444\",\n            borderColor: \"#CC0000\",\n            glyphColor: \"#FFFFFF\"\n        });\n        const marker = new google.maps.marker.AdvancedMarkerElement({\n            position: {\n                lat: place.location.latitude,\n                lng: place.location.longitude\n            },\n            title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n            content: pinElement.element,\n            gmpDraggable: false\n        });\n        marker.addListener(\"gmp-click\", ()=>{\n            var // Close any existing InfoWindow\n            _infoWindowRef_current;\n            (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n            window.currentInfoWindowMarker = {\n                markerId: place.id,\n                marker: marker\n            };\n            const content = createPlaceInfoWindowContent(place, place.id);\n            if (content && infoWindowRef.current && mapInstanceRef.current) {\n                const position = marker.position;\n                infoWindowRef.current.setContent(content);\n                infoWindowRef.current.setPosition(position);\n                infoWindowRef.current.open(mapInstanceRef.current);\n            }\n        });\n        return marker;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/travelrizz/components/features/map-component.tsx\",\n                lineNumber: 720,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/travelrizz/components/features/map-component.tsx\",\n                lineNumber: 722,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/travelrizz/components/features/map-component.tsx\",\n                    lineNumber: 728,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/travelrizz/components/features/map-component.tsx\",\n                lineNumber: 727,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/travelrizz/components/features/map-component.tsx\",\n        lineNumber: 719,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"fkvZqn7wn+CYKhHkVUX0XpdyMLI=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/features/map-component.tsx\n"));

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: function() { return /* binding */ BUDGET_DESCRIPTIONS; },\n/* harmony export */   BUDGET_OPTIONS: function() { return /* binding */ BUDGET_OPTIONS; },\n/* harmony export */   BudgetLevel: function() { return /* binding */ BudgetLevel; },\n/* harmony export */   CURRENCY_INFO: function() { return /* binding */ CURRENCY_INFO; },\n/* harmony export */   ComponentType: function() { return /* binding */ ComponentType; },\n/* harmony export */   DEFAULT_CURRENCIES: function() { return /* binding */ DEFAULT_CURRENCIES; },\n/* harmony export */   LANGUAGE_LABELS: function() { return /* binding */ LANGUAGE_LABELS; },\n/* harmony export */   LANGUAGE_OPTIONS: function() { return /* binding */ LANGUAGE_OPTIONS; },\n/* harmony export */   PREFERENCE_ICONS: function() { return /* binding */ PREFERENCE_ICONS; },\n/* harmony export */   PREFERENCE_OPTIONS: function() { return /* binding */ PREFERENCE_OPTIONS; },\n/* harmony export */   SupportedLanguage: function() { return /* binding */ SupportedLanguage; },\n/* harmony export */   TravelPreference: function() { return /* binding */ TravelPreference; }\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map((param)=>{\n    let [key, value] = param;\n    return {\n        value,\n        label: LANGUAGE_LABELS[value]\n    };\n});\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n"));

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   metricsManager: function() { return /* binding */ metricsManager; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"object\" !== \"undefined\") {\n            const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n            if (session === null || session === void 0 ? void 0 : session.savedPlaces) {\n                try {\n                    // Clear existing places before loading\n                    places.clear();\n                    session.savedPlaces.forEach((place)=>{\n                        if (place === null || place === void 0 ? void 0 : place.id) {\n                            places.set(place.id, place);\n                        }\n                    });\n                } catch (error) {\n                    console.error(\"[savedPlacesManager] Error loading places:\", error);\n                }\n            }\n            initialized = true;\n        }\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place === null || place === void 0 ? void 0 : place.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        getPlaceById (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.get(id);\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            if ((place === null || place === void 0 ? void 0 : place.id) && places.has(place.id)) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        updatePlaces (updatedPlaces) {\n            loadFromStorage(); // Ensure places are loaded\n            updatedPlaces.forEach((place)=>{\n                if (place === null || place === void 0 ? void 0 : place.id) {\n                    places.set(place.id, place);\n                }\n            });\n            this._persist();\n            this._notifyChange();\n        },\n        _persist () {\n            if (true) {\n                const placesArray = Array.from(places.values());\n                // Update travel_rizz_session\n                const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n                if (session) {\n                    session.savedPlaces = placesArray;\n                    session.savedPlacesCount = places.size;\n                    (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.safeStorageOp)(()=>{\n                        _session_manager__WEBPACK_IMPORTED_MODULE_1__.storage === null || _session_manager__WEBPACK_IMPORTED_MODULE_1__.storage === void 0 ? void 0 : _session_manager__WEBPACK_IMPORTED_MODULE_1__.storage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n                    }, undefined);\n                }\n            }\n        },\n        _notifyChange () {\n            if (true) {\n                window.savedPlaces = Array.from(this.places.values());\n                // Dispatch event with type to handle different update scenarios\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(this.places.values()),\n                        count: this.places.size,\n                        type: \"update\"\n                    }\n                }));\n            }\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (true) {\n    savedPlacesManager.places = new Map();\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? \"different \".concat(searchText, \" in \").concat(cityName) : \"\".concat(searchText, \" \").concat(cityName);\n    console.log(\"[searchWithStrategy] Using \".concat(useAlternateSearch ? \"alternate\" : \"original\", \" search:\"), query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places, _data_places__displayName;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places[0])) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: ((_data_places__displayName = data.places[0].displayName) === null || _data_places__displayName === void 0 ? void 0 : _data_places__displayName.text) || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        var _result_places;\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!(result === null || result === void 0 ? void 0 : (_result_places = result.places) === null || _result_places === void 0 ? void 0 : _result_places[0])) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (false) {}\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (false) {}\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_photos, _place_displayName;\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ }),

/***/ "./utils/travel-info-utils.ts":
/*!************************************!*\
  !*** ./utils/travel-info-utils.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   travelInfoManager: function() { return /* binding */ travelInfoManager; }\n/* harmony export */ });\nconst CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 hours\n;\nclass TravelInfoManager {\n    getCacheKey(place1, place2) {\n        // Sort IDs to ensure same key regardless of order\n        const ids = [\n            place1.id,\n            place2.id\n        ].sort();\n        return \"\".concat(ids[0], \"-\").concat(ids[1]);\n    }\n    isCacheValid(info) {\n        return !info.error && Date.now() - info.timestamp < CACHE_DURATION;\n    }\n    async getTravelInfo(place1, place2) {\n        if (!(place1 === null || place1 === void 0 ? void 0 : place1.location) || !(place2 === null || place2 === void 0 ? void 0 : place2.location)) {\n            console.log(\"[TravelInfoManager] Missing location:\", {\n                place1: place1 === null || place1 === void 0 ? void 0 : place1.displayName,\n                place2: place2 === null || place2 === void 0 ? void 0 : place2.displayName,\n                loc1: place1 === null || place1 === void 0 ? void 0 : place1.location,\n                loc2: place2 === null || place2 === void 0 ? void 0 : place2.location\n            });\n            return {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n        }\n        const key = this.getCacheKey(place1, place2);\n        const cached = this.cache[key];\n        if (cached && this.isCacheValid(cached)) {\n            console.log(\"[TravelInfoManager] Using cached info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            return cached;\n        }\n        try {\n            console.log(\"[TravelInfoManager] Fetching new info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            const response = await fetch(\"/api/travel-info\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    origin: {\n                        location: {\n                            latLng: {\n                                latitude: place1.location.latitude,\n                                longitude: place1.location.longitude\n                            }\n                        }\n                    },\n                    destination: {\n                        location: {\n                            latLng: {\n                                latitude: place2.location.latitude,\n                                longitude: place2.location.longitude\n                            }\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                console.error(\"[TravelInfoManager] API Error:\", response.status);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            const data = await response.json();\n            if (data.error) {\n                console.error(\"[TravelInfoManager] Data Error:\", data.error);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            console.log(\"[TravelInfoManager] Raw API response:\", data);\n            const info = {\n                duration: data.duration || \"--\",\n                distance: data.distance || \"--\",\n                timestamp: Date.now(),\n                polyline: data.polyline,\n                legPolyline: data.legPolyline\n            };\n            // Only cache if we have valid data\n            if (data.duration && data.distance && !data.duration.includes(\"NaN\") && !data.distance.includes(\"NaN\")) {\n                this.cache[key] = info;\n            } else {\n                console.error(\"[TravelInfoManager] Invalid data received:\", data);\n            }\n            return info;\n        } catch (error) {\n            console.error(\"[TravelInfoManager] Error:\", error);\n            const errorInfo = {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n            this.cache[key] = errorInfo;\n            return errorInfo;\n        }\n    }\n    clearCache() {\n        console.log(\"[TravelInfoManager] Clearing entire cache\");\n        this.cache = {};\n    }\n    // Clear all routes involving any of the places\n    clearRoutesForPlaces(places) {\n        console.log(\"[TravelInfoManager] Clearing routes for places:\", places.map((p)=>p.id));\n        const placeIds = new Set(places.map((p)=>p.id));\n        Object.keys(this.cache).forEach((key)=>{\n            const [id1, id2] = key.split(\"-\");\n            if (placeIds.has(id1) || placeIds.has(id2)) {\n                console.log(\"[TravelInfoManager] Clearing cache for:\", key);\n                delete this.cache[key];\n            }\n        });\n    }\n    // Deprecated: Use clearRoutesForPlaces instead\n    clearRoutesForPlace(place) {\n        this.clearRoutesForPlaces([\n            place\n        ]);\n    }\n    constructor(){\n        this.cache = {};\n        this.cache = {};\n    }\n}\nconst travelInfoManager = new TravelInfoManager();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/travel-info-utils.ts\n"));

/***/ })

}]);